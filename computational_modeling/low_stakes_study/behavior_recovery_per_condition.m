%-----------------Zbozinek*, Charpentier*, Qi*, & Mobbs---------------------
% *co-first authors

%Use each subject's parameter estimates to generate data and compare
%gambling percentage for each condition between actual data and
%model-generated data

clear all
close all

data_dir = pwd
cd(data_dir)

% init the randomization screen
RandStream.setGlobalStream(RandStream('mt19937ar','Seed','shuffle'));

%load data
load('model_results_low_stakes.mat','fitResult')
data = fitResult.Data;
nsub = 367; %number of subjects  

params_mod1 = fitResult.Model1.Params;
params_mod2 = fitResult.Model2.Params;
params_mod3 = fitResult.Model3.Params;
params_mod4 = fitResult.Model4.Params;
params_mod5 = fitResult.Model5.Params;
params_mod6 = fitResult.Model6.Params;

actual_Pg = zeros (nsub,8); %table to collect actual gambling percentage data (each column is a condition - 1 to 8)
mod1_Pg = zeros(nsub,8); %data generated by model 1
mod2_Pg = zeros(nsub,8); %data generated by model 2
mod3_Pg = zeros(nsub,8); %data generated by model 3
mod4_Pg = zeros(nsub,8); %data generated by model 4
mod5_Pg = zeros(nsub,8); %data generated by model 5
mod6_Pg = zeros(nsub,8); %data generated by model 6

for s=1:nsub 
    
    display(['Sub ' num2str(s)])
    
    %first calculate actual gambling percentages per condition
    %for conditions 7 and 8, 'gambling' means choice of ambiguous option
    P = data(s).P;
    for c = 1:8
        ind_c = P(:,3) == c;
        actual_Pg(s,c) = mean(P(ind_c,8));
    end
    
    %Model 1: Prospect theory model using all data
    param_sub = params_mod1(s,:);
    P_pred = generate_choice_Model1(param_sub,P);
    for c = 1:8
        ind_c = P(:,3) == c;
        mod1_Pg(s,c) = mean(P_pred(ind_c,4));
    end
    
    %Model 2: One ambiguity parameter common for C2-3-5-6-7-8
    param_sub = params_mod2(s,:);
    P_pred = generate_choice_Model2(param_sub,P);
    for c = 1:8
        ind_c = P(:,3) == c;
        mod2_Pg(s,c) = mean(P_pred(ind_c,4));
    end
    
    %Model 3: Separate ambiguity parameters for gains (C3-5-6-7) and losses (C2-8)
    param_sub = params_mod3(s,:);
    P_pred = generate_choice_Model3(param_sub,P);
    for c = 1:8
        ind_c = P(:,3) == c;
        mod3_Pg(s,c) = mean(P_pred(ind_c,4));
    end
    
    %Model 4: Separate ambiguity parameters depending on context: 
    % a loss is present (C2-3-8) vs no loss present (C5-6-7)
    param_sub = params_mod4(s,:);
    P_pred = generate_choice_Model4(param_sub,P);
    for c = 1:8
        ind_c = P(:,3) == c;
        mod4_Pg(s,c) = mean(P_pred(ind_c,4));
    end
        
    %Model 5: Separate ambiguity parameters for risky gain (C3-5), risky loss (C2), sure gain (C6-7) and sure loss (C8)
    param_sub = params_mod5(s,:);
    P_pred = generate_choice_Model5(param_sub,P);
    for c = 1:8
        ind_c = P(:,3) == c;
        mod5_Pg(s,c) = mean(P_pred(ind_c,4));
    end 
     
    %Model 6: Full model: ambiguity parameter for C2, 3, 5, 6, 7, 8 separate
    param_sub = params_mod6(s,:);
    P_pred = generate_choice_Model6(param_sub,P);
    for c = 1:8
        ind_c = P(:,3) == c;
        mod6_Pg(s,c) = mean(P_pred(ind_c,4));
    end 
    
end

fitResult.PredictedBehavior.ActualBehavior = actual_Pg;
fitResult.PredictedBehavior.Model1 = mod1_Pg;
fitResult.PredictedBehavior.Model2 = mod2_Pg;
fitResult.PredictedBehavior.Model3 = mod3_Pg;
fitResult.PredictedBehavior.Model4 = mod4_Pg;
fitResult.PredictedBehavior.Model5 = mod5_Pg;
fitResult.PredictedBehavior.Model6 = mod6_Pg;
save('model_results_low_stakes.mat','fitResult')

%% plot actual vs predicted data for Models 5 and 6

%Model 5
figure()
for p=1:8
    x = fitResult.PredictedBehavior.ActualBehavior(:,p);
    y = fitResult.PredictedBehavior.Model5(:,p);
    subplot(2,4,p); hold on
    plot(x, y, 'ok')
    b = glmfit(x,y);
    plot([min(x) max(x)], [b(1)+min(x)*b(2) b(1)+max(x)*b(2)], '-b') %plot linear fit
    xlim([0 1])
    ylim([0 1])
    r = corr(x,y);
    xlabel('Actual')
    ylabel('Predicted - Mod5')
    title(['C' num2str(p) ' - R=' num2str(r)])
end

%Model 6
figure()
for p=1:8
    x = fitResult.PredictedBehavior.ActualBehavior(:,p);
    y = fitResult.PredictedBehavior.Model6(:,p);
    subplot(2,4,p); hold on
    plot(x, y, 'ok')
    b = glmfit(x,y);
    plot([min(x) max(x)], [b(1)+min(x)*b(2) b(1)+max(x)*b(2)], '-b') %plot linear fit
    xlim([0 1])
    ylim([0 1])
    r = corr(x,y);
    xlabel('Actual')
    ylabel('Predicted - Mod6')
    title(['C' num2str(p) ' - R=' num2str(r)])
end
